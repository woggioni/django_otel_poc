networks:
  default:
    external: false
    ipam:
      driver: default
      config:
        - subnet: 172.128.0.0/16
          ip_range: 172.128.0.0/16
          gateway: 172.128.0.254

volumes:
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local
services:
  django:
    build:
      context: ..
    container_name: django
    restart: unless-stopped
    environment:
      - GRANIAN_HOST=0.0.0.0
      - GRANIAN_PORT=8080
      - GRANIAN_INTERFACE=asginl
      - GRANIAN_HTTP=1
      #      - GRANIAN_LOOP=asyncio
      #      - GRANIAN_LOOP_OPT=True
      - DJANGO_SETTINGS_MODULE=django_otel_poc.settings
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm:8200
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=True
#      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://apm:8200
      - OTEL_EXPORTER_OTLP_METRICS_INSECURE=True
#      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://apm:8200
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_RESOURCE_ATTRIBUTES=service.name=django,service.version=0.0.1,deployment.environment=production
    ports:
      - "127.0.0.1:8080:8080"
      - "[::1]:8080:8080"
    profiles: [prod]
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 256M
  apm:
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    container_name: apm
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    command: ["--strict.perms=false"]
    ports:
      - "127.0.0.1:8200:8200"
    volumes:
      - ./conf/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G
    depends_on:
      elasticsearch:
        condition: service_healthy
  elasticsearch:
    build:
      context: elasticsearch
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.apm_data.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9200:9200"
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 | grep -q '\"name\" : \"elasticsearch\"'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    # build:
    #   context: kibana
    #   args:
    #     STACK_VERSION: ${STACK_VERSION}
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    restart: unless-stopped
    ports:
      - "127.0.0.1:5601:5601"
    volumes:
      - ./conf/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana-data:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    depends_on:
      elasticsearch:
        condition: service_healthy
  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 5s
#  opentelemetry-collector:
#    image: otel/opentelemetry-collector-contrib
#    container_name: opentelementry-collector

